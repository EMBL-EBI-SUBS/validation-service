buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.21.RELEASE")
    }
}

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '1.5.21.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.hidetake.ssh' version "2.10.1"
    id "com.sourcemuse.mongo" version "1.0.7"
    id 'application'
}

group 'uk.ac.ebi.subs'
version '2.24.0-SNAPSHOT'
mainClassName = 'uk.ac.ebi.subs.ValidationServiceApplication'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

springBoot {
    buildInfo()
    executable = true
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

test {
    runWithMongoDb = true
}

mongo {
    mongoVersion = "3.4.3"
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("de.codecentric:spring-boot-admin-starter-client:1.5.7")
    implementation("org.springframework.boot:spring-boot-starter-amqp")

    implementation("uk.ac.ebi.subs:subs-processing-model:2.15.0-SNAPSHOT")
    implementation("uk.ac.ebi.subs:subs-messaging:0.6.0-SNAPSHOT")
    implementation("uk.ac.ebi.subs:subs-repository:2.33.1-SNAPSHOT")
    implementation("uk.ac.ebi.subs:validator-common:3.14.0-SNAPSHOT")

    implementation("de.siegmar:logback-gelf:1.1.0")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.11")
    
    testImplementation("org.springframework.boot:spring-boot-starter-test"){
        exclude group: "com.vaadin.external.google", module:"android-json"
    }

    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
}

task('externalCiTest', type: Test) {
    useJUnit {
    	excludeCategories 'uk.ac.ebi.subs.validator.config.RabbitMQDependentTest'
    }
    testLogging {
        exceptionFormat = 'full'
    }

    configure(externalCiTest) {
        group = "verification"
        description = 'Run tests appropriate for our external CI environment'
    }
    runWithMongoDb = true
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

def devDeployHostName = hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
def testDeployHostName = hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
def prodDeployHostName = hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'

remotes {
    submission_dev {
        role('dev')
        host = devDeployHostName
    }
    submission_test {
        role('test')
        host = testDeployHostName
    }
    submission_prod {
        role('prod')
        host = prodDeployHostName
    }
}

task deployJar(dependsOn: 'assemble') {
    doLast {
        def uploadJarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
        File jarDeployDir = new File("/data/$gradle_env/$project.name/jar",uploadJarFileName)
        sshRun(jarDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(File jarDeployFile) {
    def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
    File jarDeployDir = jarDeployFile.getParentFile()
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            println "Uploading jar $jar.archivePath.name to $jarDeployDir/$uploadJarFileName  area on $remote"
            put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}
